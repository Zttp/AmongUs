import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Players, Inventory, LeaderBoard, BuildBlocksSet, Teams, Damage, BreackGraph, Ui, Properties, GameMode, Spawns, Timers, Bots } from 'pixel_combats/room';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
const WAITING_TIME = 10; // –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
const GAME_TIME = 600;   // –û—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
const END_TIME = 30;     // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞

// –¶–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥
const playersColor = new Color(0, 0, 1, 0); // –°–∏–Ω–∏–π - –ò–≥—Ä–æ–∫–∏
const losersColor = new Color(0.5, 0.5, 0.5, 0); // –°–µ—Ä—ã–π - –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ

// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
const Inv = Inventory.GetContext();
const Sp = Spawns.GetContext();
const Dmg = Damage.GetContext();
const Props = Properties.GetContext();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const GameStates = {
    WAITING: "WaitingPlayers",
    GAME: "GameMode",
    END: "EndOfMatch"
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
const mainTimer = Timers.GetContext().Get("Main");
const serverTimer = Timers.GetContext().Get("Server");

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const gameMode = {
    state: GameStates.WAITING,
    traitor: null,
    sheriff: null,
    deadPlayers: new Set(),
    playerBots: new Map(),
    playerInBot: new Map(),
    botPlayer: new Map(),
    freezeTimers: new Map(),
    adminId: "D411BD94CAE31F89"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
function initServerProperties() {
    Props.Get('Time_Hours').Value = 0;
    Props.Get('Time_Minutes').Value = 0;
    Props.Get('Time_Seconds').Value = 0;
    Props.Get('Players_Now').Value = 0;
    Props.Get('Players_WereMax').Value = 24;
    Props.Get('Time_FixedString').Value = '00:00:00';
    Props.Get('Round_Time').Value = GAME_TIME;
    Props.Get('Game_State').Value = gameMode.state;
}

function initServerTimer() {
    serverTimer.OnTimer.Add(function(t) {
        Props.Get('Time_Seconds').Value++;
        
        if (Props.Get('Time_Seconds').Value >= 60) {
            Props.Get('Time_Seconds').Value = 0;
            Props.Get('Time_Minutes').Value++;
        }
        
        if (Props.Get('Time_Minutes').Value >= 60) {
            Props.Get('Time_Minutes').Value = 0;
            Props.Get('Time_Hours').Value++;
        }
        
        Props.Get('Players_Now').Value = Players.All.length;
        
        if (Props.Get('Players_Now').Value > Props.Get('Players_WereMax').Value) {
            Props.Get('Players_WereMax').Value = Props.Get('Players_Now').Value;
        }
        
        Props.Get('Time_FixedString').Value = 
            `${Props.Get('Time_Hours').Value.toString().padStart(2, '0')}:` +
            `${Props.Get('Time_Minutes').Value.toString().padStart(2, '0')}:` +
            `${Props.Get('Time_Seconds').Value.toString().padStart(2, '0')}`;
        
        serverTimer.RestartLoop(1);
    });
    serverTimer.RestartLoop(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
function setupTeams() {
    Teams.Add('Players', '–ò–≥—Ä–æ–∫–∏', playersColor);
    Teams.Add('Losers', '–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ', losersColor);

    const PlayersTeam = Teams.Get('Players');
    const LosersTeam = Teams.Get('Losers');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–≤–Ω–æ–≤
    PlayersTeam.Spawns.SpawnPointsGroups.Add(1);
    LosersTeam.Spawns.Spawn = false; // –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ —Å–ø–∞–≤–Ω—è—Ç—Å—è

    return { PlayersTeam, LosersTeam };
}

const { PlayersTeam, LosersTeam } = setupTeams();

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
function setGameState(newState) {
    gameMode.state = newState;
    Props.Get('Game_State').Value = newState;
    
    switch(newState) {
        case GameStates.WAITING:
            Ui.GetContext().Hint.Value = "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...";
            Sp.Enable = false;
            mainTimer.Restart(WAITING_TIME);
            break;
            
        case GameStates.GAME:
            Ui.GetContext().Hint.Value = "üî™ –°—Ä–µ–¥–∏ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–∞—Ç–µ–ª—å! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!";
            Inv.Main.Value = true; // –û—Ä—É–∂–∏–µ —É –≤—Å–µ—Ö
            Inv.Secondary.Value = false;
            Inv.Melee.Value = true;
            Inv.Build.Value = false;
            Dmg.DamageOut.Value = false; // –£—Ä–æ–Ω —Ç–æ–ª—å–∫–æ —É –ø—Ä–µ–¥–∞—Ç–µ–ª—è –∏ —à–µ—Ä–∏—Ñ–∞
            Sp.Enable = true;
            Sp.Spawn();
            assignRoles();
            mainTimer.Restart(GAME_TIME);
            break;
            
        case GameStates.END:
            Ui.GetContext().Hint.Value = "üèÅ –ú–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω!";
            Sp.Enable = false;
            mainTimer.Restart(END_TIME);
            Game.RestartGame();
            break;
    }
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
function assignRoles() {
    const players = Players.All;
    if (players.length < 3) return;
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–∞—Ç–µ–ª—è
    const traitorIndex = Math.floor(Math.random() * players.length);
    gameMode.traitor = players[traitorIndex].id;
    players[traitorIndex].Ui.Hint.Value = "üî™ –¢–´ –ü–†–ï–î–ê–¢–ï–õ–¨! –£–±–µ–π –≤—Å–µ—Ö, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∏—Å—å!";
    players[traitorIndex].contextedProperties.SkinType.Value = 1;
    
    // –í—ã–±–∏—Ä–∞–µ–º —à–µ—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤)
    if (players.length >= 5) {
        let sheriffIndex;
        do {
            sheriffIndex = Math.floor(Math.random() * players.length);
        } while (sheriffIndex === traitorIndex);
        
        gameMode.sheriff = players[sheriffIndex].id;
        players[sheriffIndex].Ui.Hint.Value = "üëÆ –¢–´ –®–ï–†–ò–§! –ù–∞–π–¥–∏ –∏ —É–±–µ–π –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
        players[sheriffIndex].contextedProperties.SkinType.Value = 3;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–±—ã—á–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    players.forEach((player, index) => {
        if (index !== traitorIndex && index !== gameMode.sheriff) {
            player.Ui.Hint.Value = "üë§ –¢—ã –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫! –ò—â–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
            player.contextedProperties.SkinType.Value = 0;
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
function checkWinConditions() {
    const alivePlayers = Players.All.filter(p => !gameMode.deadPlayers.has(p.id));
    const traitorAlive = alivePlayers.some(p => p.id === gameMode.traitor);
    const sheriffAlive = gameMode.sheriff ? alivePlayers.some(p => p.id === gameMode.sheriff) : false;
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å –ø–æ–±–µ–∂–¥–∞–µ—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è 1 –∏–≥—Ä–æ–∫ –∏ –æ–Ω —Å–∞–º
    if (alivePlayers.length === 1 && traitorAlive) {
        endRound('–ü—Ä–µ–¥–∞—Ç–µ–ª—å');
        return;
    }
    
    // –ò–≥—Ä–æ–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—å —É–±–∏—Ç
    if (!traitorAlive) {
        endRound('–ò–≥—Ä–æ–∫–∏');
        return;
    }
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å –ø–æ–±–µ–∂–¥–∞–µ—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
    if (Props.Get('Round_Time').Value <= 0) {
        endRound('–ü—Ä–µ–¥–∞—Ç–µ–ª—å');
        return;
    }
}

// –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
function endRound(winner) {
    let room.Ui.Hint.Value = "";
    
    if (winner === '–ü—Ä–µ–¥–∞—Ç–µ–ª—å') {
        room.Ui.Hint.Value = "üî™ –ü—Ä–µ–¥–∞—Ç–µ–ª—å –ø–æ–±–µ–∂–¥–∞–µ—Ç!";
        const traitor = Players.Get(gameMode.traitor);
        if (traitor) traitor.Properties.Scores.Value += 10000;
    } else {
        room.Ui.Hint.Value = "üéâ –ò–≥—Ä–æ–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç!";
        Players.All.forEach(player => {
            if (!gameMode.deadPlayers.has(player.id)) {
                player.Properties.Scores.Value += 5000;
            }
        });
    }
    
    room.Ui.Hint.Value = message;
    setGameState(GameStates.END);
}

// –°–∏—Å—Ç–µ–º–∞ —É–±–∏–π—Å—Ç–≤
function handleKill(killer, victim) {
    if (!killer || !victim) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —É–±–∏–π—Ü–∞ –Ω–∞–Ω–æ—Å–∏—Ç—å —É—Ä–æ–Ω
    const isTraitor = killer.id === gameMode.traitor;
    const isSheriff = killer.id === gameMode.sheriff;
    
    if (!isTraitor && !isSheriff) {
        killer.Ui.Hint.Value = "üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!";
        return;
    }
    
    // –®–µ—Ä–∏—Ñ –º–æ–∂–µ—Ç —É–±–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—è
    if (isSheriff && victim.id !== gameMode.traitor) {
        killer.Ui.Hint.Value = "üíî –û—à–∏–±–∫–∞! –í—ã —É–±–∏–ª–∏ –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ–≥–æ!";
        killPlayer(killer);
        return;
    }
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å –∏–ª–∏ —à–µ—Ä–∏—Ñ (—É–±–∏–≤–∞—é—â–∏–π –ø—Ä–µ–¥–∞—Ç–µ–ª—è) —É–±–∏–≤–∞–µ—Ç
    killPlayer(victim);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
    checkWinConditions();
}

// –£–±–∏–π—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∞
function killPlayer(player) {
    player.Team = LosersTeam;
    gameMode.deadPlayers.add(player.id);
    player.contextedProperties.SkinType.Value = 2;
    player.Ui.Hint.Value = "–í–∞—Å —É–±–∏–ª–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dead [—Å–æ–æ–±—â–µ–Ω–∏–µ] –¥–ª—è —á–∞—Ç–∞";
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∑–∞–≤–∏—Å–∞–Ω–∏—è –¥–ª—è –∂–µ—Ä—Ç–≤—ã
    const freezeTimer = Timers.GetContext(player).Get('DeathFreeze');
    freezeTimer.OnTimer.Add(() => {
        player.SetPositionAndRotation(player.Position, player.Rotation);
    });
    freezeTimer.RestartLoop(0.1);
    gameMode.freezeTimers.set(player.id, freezeTimer);
}

// –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª—è
function spawnBot(player, skinId, weaponId) {
    if (player.id !== gameMode.traitor) {
        player.Ui.Hint.Value = "üîí –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ—Ç–æ–≤!";
        return;
    }
    
    if (gameMode.playerBots.has(player.id)) {
        player.Ui.Hint.Value = "üö´ –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –±–æ—Ç–∞!";
        return;
    }
    
    const botData = new Bots.HumanBotSpawnData();
    botData.Position = player.Position;
    botData.Rotation = player.Rotation;
    botData.SkinId = skinId;
    botData.WeaponId = weaponId;
    
    const bot = Bots.CreateHuman(botData);
    if (!bot) return;
    
    gameMode.playerBots.set(player.id, bot);
    player.Ui.Hint.Value = "ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /aye –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º";
}

// –í—Å–µ–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞
function possessBot(player) {
    if (player.id !== gameMode.traitor) {
        player.Ui.Hint.Value = "üîí –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–∞–º–∏!";
        return;
    }
    
    const bot = gameMode.playerBots.get(player.id);
    if (!bot) {
        player.Ui.Hint.Value = "üö´ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞!";
        return;
    }
    
    if (gameMode.playerInBot.has(player.id)) {
        player.Ui.Hint.Value = "üö´ –í—ã —É–∂–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç–æ–º!";
        return;
    }
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ–¥ –∫–∞—Ä—Ç—É
    player.SetPositionAndRotation(new Vector3(0, -1000, 0), player.Rotation);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
    const controlTimer = Timers.GetContext(player).Get('BotControl');
    controlTimer.OnTimer.Add(() => {
        if (bot.Alive) {
            bot.SetPositionAndDirection(player.Position, player.LookDirection);
        }
    });
    controlTimer.RestartLoop(0.1);
    
    gameMode.playerInBot.set(player.id, bot);
    gameMode.botPlayer.set(bot.Id, player.id);
    
    player.Ui.Hint.Value = "üëª –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç–æ–º!";
}

// –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞
function initChatCommands() {
    Chat.OnMessage.Add(function(m) {
        const msg = m.Text.trim();
        const sender = Players.GetByRoomId(m.Sender);
        if (!sender) return;

        // –ú–µ—Ä—Ç–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ä—Ç–≤—ã–π —á–∞—Ç
        if (gameMode.deadPlayers.has(sender.id) && !msg.startsWith('/dead')) {
            return;
        }

        const args = msg.split(' ');
        const command = args[0].toLowerCase();

        if (command === '/help') {
            sender.Ui.Hint.Value = `üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/bot [skin] [weapon] - —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/aye - —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/players - —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
/whoami - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å
/dead [msg] - —á–∞—Ç –¥–ª—è –º–µ—Ä—Ç–≤—ã—Ö
/suicide - —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ (–∞–¥–º–∏–Ω)
/revive [id] - –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)`;
        }
        
        else if (command === '/bot') {
            if (args.length < 3) {
                sender.Ui.Hint.Value = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bot [skin] [weapon]";
                return;
            }
            
            const skinId = parseInt(args[1]);
            const weaponId = parseInt(args[2]);
            
            if (isNaN(skinId)) {
                sender.Ui.Hint.Value = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–∫–∏–Ω–∞!";
                return;
            }
            
            if (isNaN(weaponId)) {
                sender.Ui.Hint.Value = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä—É–∂–∏—è!";
                return;
            }
            
            spawnBot(sender, skinId, weaponId);
        }
        
        else if (command === '/aye') {
            possessBot(sender);
        }
        
        else if (command === '/players') {
            const alivePlayers = Players.All.filter(p => 
                !gameMode.deadPlayers.has(p.id) && 
                p.Team.Name === "Players"
            );
            
            if (alivePlayers.length > 0) {
                let list = "üë• –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n";
                alivePlayers.forEach((player, index) => {
                    list += `${index+1}. ${player.NickName}\n`;
                });
                sender.Ui.Hint.Value = list;
            } else {
                sender.Ui.Hint.Value = "üíÄ –ù–µ—Ç –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!";
            }
        }
        
        else if (command === '/whoami') {
            if (sender.id === gameMode.traitor) {
                sender.Ui.Hint.Value = "üî™ –¢—ã –ü–†–ï–î–ê–¢–ï–õ–¨! –£–±–µ–π –≤—Å–µ—Ö, –Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∏—Å—å!";
            } else if (sender.id === gameMode.sheriff) {
                sender.Ui.Hint.Value = "üëÆ –¢—ã –®–ï–†–ò–§! –ù–∞–π–¥–∏ –∏ —É–±–µ–π –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
            } else {
                sender.Ui.Hint.Value = "üë§ –¢—ã –ú–ò–†–ù–´–ô –∏–≥—Ä–æ–∫! –ò—â–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
            }
        }
        
        else if (command === '/dead') {
            const message = msg.substring(6).trim();
            if (message) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–µ—Ä—Ç–≤—ã–π —á–∞—Ç
                Players.All.forEach(player => {
                    if (gameMode.deadPlayers.has(player.id)) {
                        player.Ui.Hint.Value = `üíÄ [–ú–ï–†–¢–í–´–ï] ${sender.NickName}: ${message}`;
                    }
                });
            }
        }
        
        // –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
        else if (command === '/suicide') {
            if (sender.id !== gameMode.adminId) {
                sender.Ui.Hint.Value = "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!";
                return;
            }
            killPlayer(sender);
            sender.Ui.Hint.Value = "‚ö∞Ô∏è –í—ã —É–±–∏–ª–∏ —Å–µ–±—è!";
        }
        
        else if (command === '/revive') {
            if (sender.id !== gameMode.adminId) {
                sender.Ui.Hint.Value = "üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!";
                return;
            }
            
            if (args.length < 2) {
                sender.Ui.Hint.Value = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revive [id]";
                return;
            }
            
            const playerId = Number(args[1]);
            const player = Players.GetByRoomId(playerId);
            
            if (player && gameMode.deadPlayers.has(player.id)) {
                player.Team = PlayersTeam;
                gameMode.deadPlayers.delete(player.id);
                player.contextedProperties.SkinType.Value = 0;
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–º–æ—Ä–æ–∑–∫–∏
                const freezeTimer = gameMode.freezeTimers.get(player.id);
                if (freezeTimer) {
                    freezeTimer.Stop();
                    gameMode.freezeTimers.delete(player.id);
                }
                
                sender.Ui.Hint.Value = `‚úÖ ${player.NickName} –≤–æ—Å–∫—Ä–µ—à–µ–Ω!`;
                player.Ui.Hint.Value = "‚ú® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—Å–∫—Ä–µ—Å–∏–ª –≤–∞—Å!";
            } else {
                sender.Ui.Hint.Value = "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–µ—Ä—Ç–≤!";
            }
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
function setupLeaderboard() {
    LeaderBoard.PlayerLeaderBoardValues = [
        new DisplayValueHeader('Kills', '–£–±–∏–π—Å—Ç–≤–∞', '–£–±–∏–π—Å—Ç–≤–∞'),
        new DisplayValueHeader('Deaths', '–°–º–µ—Ä—Ç–∏', '–°–º–µ—Ä—Ç–∏'),
        new DisplayValueHeader('Scores', '–û—á–∫–∏', '–û—á–∫–∏')
    ];

    LeaderBoard.PlayersWeightGetter.Set(function(p) {
        return p.Properties.Get('Scores').Value;
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    Players.OnPlayerConnected.Add(function(player) {
        // –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç
        if (gameMode.state !== GameStates.WAITING && gameMode.state !== GameStates.END) {
            player.Team = LosersTeam;
            gameMode.deadPlayers.add(player.id);
            player.contextedProperties.SkinType.Value = 2;
            player.Ui.Hint.Value = "üíÄ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —É–∂–µ –∏–¥—É—â–µ–π –∏–≥—Ä–µ –∫–∞–∫ –º–µ—Ä—Ç–≤—ã–π";
            killPlayer(player);
            return;
        }
        
        player.Team = PlayersTeam;
        player.Properties.Get('Kills').Value = 0;
        player.Properties.Get('Deaths').Value = 0;
        player.Properties.Get('Scores').Value = 0;
        player.contextedProperties.SkinType.Value = 0;
        
        if (Players.All.length >= 3 && gameMode.state === GameStates.WAITING) {
            setGameState(GameStates.GAME);
        }
    });
    
    Teams.OnPlayerChangeTeam.Add(function(player) {
        // –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã –∫—Ä–æ–º–µ –∫–∞–∫ —á–µ—Ä–µ–∑ —É–±–∏–π—Å—Ç–≤–æ
        if (player.Team.Name !== 'Losers') {
            player.Team = PlayersTeam;
        }
    });
    
    Damage.OnKill.Add(function(killer, victim) {
        handleKill(killer, victim);
    });
    
    Damage.OnDeath.Add(function(player) {
        player.Properties.Deaths.Value++;
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    mainTimer.OnTimer.Add(function() {
        switch(gameMode.state) {
            case GameStates.WAITING:
                if (Players.All.length >= 3) {
                    setGameState(GameStates.GAME);
                } else {
                    mainTimer.Restart(WAITING_TIME);
                }
                break;
                
            case GameStates.GAME:
                Props.Get('Round_Time').Value--;
                if (Props.Get('Round_Time').Value <= 0) {
                    checkWinConditions();
                } else {
                    mainTimer.Restart(1);
                }
                break;
                
            case GameStates.END:
                Game.RestartGame();
                break;
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGameMode() {
    Dmg.DamageOut.Value = true;
    Dmg.FriendlyFire.Value = false;
    BreackGraph.OnlyPlayerBlocksDmg = true;
    
    
    
    setGameState(GameStates.WAITING);
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGameMode();
