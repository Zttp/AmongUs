import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Players, Inventory, LeaderBoard, BuildBlocksSet, Teams, Damage, BreackGraph, Ui, Properties, GameMode, Spawns, Timers, TeamsBalancer, AreaService, AreaPlayerTriggerService, AreaViewService, Chat } from 'pixel_combats/room';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
const FRIENDLY_FIRE = GameMode.Parameters.GetBool("FriendlyFire");
const IMPOSTOR_COUNT = GameMode.Parameters.GetInt("ImpostorCount") || 1;
const SHERIFF_ENABLED = GameMode.Parameters.GetBool("SheriffEnabled");
const PLAYERS_TO_START = GameMode.Parameters.GetInt("PlayersToStart") || 1;
const TASKS_PER_PLAYER = GameMode.Parameters.GetInt("TasksPerPlayer") || 3;
const KILL_COOLDOWN = GameMode.Parameters.GetInt("KillCooldown") || 30;
const DISCUSSION_TIME = GameMode.Parameters.GetInt("DiscussionTime") || 90;
const VOTING_TIME = GameMode.Parameters.GetInt("VotingTime") || 60;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const WAITING_TIME = 10;
const GAME_TIME = 600;
const END_TIME = 30;

// –¶–≤–µ—Ç–∞
const crewColor = new Color(0, 0.5, 1, 0.5); // –ì–æ–ª—É–±–æ–π - —ç–∫–∏–ø–∞–∂
const ghostColor = new Color(0.5, 0.5, 0.5, 0.5); // –°–µ—Ä—ã–π - –ø—Ä–∏–∑—Ä–∞–∫–∏
const impostorColor = new Color(1, 0, 0, 0.5); // –ö—Ä–∞—Å–Ω—ã–π - –ø—Ä–µ–¥–∞—Ç–µ–ª—å

// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
const Inv = Inventory.GetContext();
const Sp = Spawns.GetContext();
const Dmg = Damage.GetContext();
const Props = Properties.GetContext();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const GameStates = {
    WAITING: "WaitingPlayers",
    STARTING: "Starting",
    TASKS: "TasksPhase",
    DISCUSSION: "Discussion",
    VOTING: "Voting",
    END: "EndGame"
};

// –¢–∞–π–º–µ—Ä—ã
const mainTimer = Timers.GetContext().Get("Main");
const roundTimer = Timers.GetContext().Get("Round");
const killCooldownTimer = Timers.GetContext().Get("KillCD");

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const gameMode = {
    state: GameStates.WAITING,
    impostors: new Set(),
    sheriff: null,
    ghosts: new Set(),
    deadPlayers: new Set(),
    playerRoles: new Map(),
    tasks: [],
    completedTasks: 0,
    totalTasks: 0,
    bodiesReported: new Set(),
    emergencyButtonUsed: false,
    sabotageActive: false,
    killCooldowns: new Map(),
    meetingInProgress: false,
    votes: new Map(),
    adminId: "D411BD94CAE31F89"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
function initServerProperties() {
    Props.Get('Time_Seconds').Value = 0;
    Props.Get('Players_Now').Value = 0;
    Props.Get('Game_State').Value = gameMode.state;
    Props.Get('Tasks_Completed').Value = 0;
    Props.Get('Total_Tasks').Value = 0;
    Props.Get('Impostor_Count').Value = IMPOSTOR_COUNT;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
function setupTeams() {
    Teams.Add('Crew', '–≠–∫–∏–ø–∞–∂', crewColor);
    Teams.Add('Ghosts', '–ü—Ä–∏–∑—Ä–∞–∫–∏', ghostColor);
    
    const CrewTeam = Teams.Get('Crew');
    const GhostsTeam = Teams.Get('Ghosts');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–≤–Ω–æ–≤
    CrewTeam.Spawns.SpawnPointsGroups.Add(1);
    GhostsTeam.Spawns.SpawnPointsGroups.Add(2);

    return { CrewTeam, GhostsTeam };
}

const { CrewTeam, GhostsTeam } = setupTeams();

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
function setGameState(newState) {
    gameMode.state = newState;
    Props.Get('Game_State').Value = newState;
    
    switch(newState) {
        case GameStates.WAITING:
            stateProp.Value = WAITING_TIME;
            Ui.GetContext().Hint.Value = `–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º ${PLAYERS_TO_START})`;
            Sp.Enable = false;
            mainTimer.Restart(WAITING_TIME);
            break;
            
        case GameStates.STARTING:
            Ui.GetContext().Hint.Value = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...";
            assignRoles();
            generateTasks();
            mainTimer.Restart(5);
            break;
            
        case GameStates.TASKS:
            stateProp.Value = GAME_TIME;
            Ui.GetContext().Hint.Value = "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è!";
            Inv.Main.Value = false;
            Inv.Secondary.Value = false;
            Inv.Melee.Value = true;
            Inv.Build.Value = false;
            Dmg.DamageOut.Value = true;
            Sp.Enable = true;
            Sp.Spawn();
            startRoundTimer();
            break;
            
        case GameStates.DISCUSSION:
            stateProp.Value = DISCUSSION_TIME;
            Ui.GetContext().Hint.Value = "–û–±—Å—É–∂–¥–µ–Ω–∏–µ! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ —á–∞—Ç–µ!";
            freezeAllPlayers();
            mainTimer.Restart(DISCUSSION_TIME);
            break;
            
        case GameStates.VOTING:
            stateProp.Value = VOTING_TIME;
            Ui.GetContext().Hint.Value = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vote [id]";
            mainTimer.Restart(VOTING_TIME);
            break;
            
        case GameStates.END:
            stateProp.Value = END_TIME;
            Ui.GetContext().Hint.Value = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!";
            Sp.Enable = false;
            mainTimer.Restart(END_TIME);
            break;
    }
}

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
function assignRoles() {
    const players = Players.All;
    
    // –í—ã–±–æ—Ä –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π
    const impostorIndices = [];
    while (impostorIndices.length < IMPOSTOR_COUNT) {
        const idx = Math.floor(Math.random() * players.length);
        if (!impostorIndices.includes(idx)) impostorIndices.push(idx);
    }
    
    // –í—ã–±–æ—Ä —à–µ—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    let sheriffIdx = -1;
    if (SHERIFF_ENABLED && players.length > 3) {
        do {
            sheriffIdx = Math.floor(Math.random() * players.length);
        } while (impostorIndices.includes(sheriffIdx));
    }
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    players.forEach((player, index) => {
        if (impostorIndices.includes(index)) {
            gameMode.impostors.add(player.id);
            gameMode.playerRoles.set(player.id, "–ü—Ä–µ–¥–∞—Ç–µ–ª—å");
            player.Properties.Get('Role').Value = "–ü—Ä–µ–¥–∞—Ç–µ–ª—å";
            player.Ui.Hint.Value = "–¢–´ –ü–†–ï–î–ê–¢–ï–õ–¨! –£–±–∏–≤–∞–π —ç–∫–∏–ø–∞–∂ –∏ —Å–∞–±–æ—Ç–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—ã!";
        } else if (index === sheriffIdx) {
            gameMode.sheriff = player.id;
            gameMode.playerRoles.set(player.id, "–®–µ—Ä–∏—Ñ");
            player.Properties.Get('Role').Value = "–®–µ—Ä–∏—Ñ";
            player.Ui.Hint.Value = "–¢–´ –®–ï–†–ò–§! –ò—â–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π –∏ –∑–∞—â–∏—â–∞–π —ç–∫–∏–ø–∞–∂!";
        } else {
            gameMode.playerRoles.set(player.id, "–≠–∫–∏–ø–∞–∂");
            player.Properties.Get('Role').Value = "–≠–∫–∏–ø–∞–∂";
            player.Ui.Hint.Value = "–¢–´ –ß–õ–ï–ù –≠–ö–ò–ü–ê–ñ–ê! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–π –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π!";
        }
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π
function generateTasks() {
    gameMode.tasks = [
        { id: 1, name: "–ü–æ—á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É", location: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ" },
        { id: 2, name: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", location: "–û—Ä—É–∂–µ–π–Ω–∞—è" },
        { id: 3, name: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", location: "–û—Ñ–∏—Å" },
        { id: 4, name: "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å", location: "–î–≤–∏–≥–∞—Ç–µ–ª–∏" },
        { id: 5, name: "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", location: "–ù–∞–≤–∏–≥–∞—Ü–∏—è" }
    ];
    
    gameMode.completedTasks = 0;
    gameMode.totalTasks = TASKS_PER_PLAYER * CrewTeam.Players.length;
    Props.Get('Total_Tasks').Value = gameMode.totalTasks;
}

// –°–∏—Å—Ç–µ–º–∞ —É–±–∏–π—Å—Ç–≤
function handleKill(killer, victim) {
    if (!killer || !victim) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    const killerRole = gameMode.playerRoles.get(killer.id);
    const victimRole = gameMode.playerRoles.get(victim.id);
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å —É–±–∏–≤–∞–µ—Ç —á–ª–µ–Ω–∞ —ç–∫–∏–ø–∞–∂–∞ –∏–ª–∏ —à–µ—Ä–∏—Ñ–∞
    if (killerRole === "–ü—Ä–µ–¥–∞—Ç–µ–ª—å" && (victimRole === "–≠–∫–∏–ø–∞–∂" || victimRole === "–®–µ—Ä–∏—Ñ")) {
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
        CrewTeam.Remove(victim);
        GhostsTeam.Add(victim);
        gameMode.ghosts.add(victim.id);
        gameMode.deadPlayers.add(victim.id);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞
        victim.Properties.Get('Alive').Value = false;
        victim.Ui.Hint.Value = "–¢–´ –£–ú–ï–†! –¢–µ–ø–µ—Ä—å —Ç—ã –ø—Ä–∏–∑—Ä–∞–∫.";
        victim.contextedProperties.SkinType.Value = 4; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫–∏–Ω
        
        // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
        Chat.Send(`‚ö∞Ô∏è ${victim.NickName} –±—ã–ª —É–±–∏—Ç!`);
        
        // –¢–µ–ª–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        gameMode.bodiesReported.add(victim.id);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ —É–±–∏–π—Å—Ç–≤–∞
        gameMode.killCooldowns.set(killer.id, KILL_COOLDOWN);
        killer.Ui.Hint.Value = `–£–±–∏–π—Å—Ç–≤–æ! –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: ${KILL_COOLDOWN} —Å–µ–∫`;
    }
    
    // –®–µ—Ä–∏—Ñ –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–∏—Ç—å
    else if (killerRole === "–®–µ—Ä–∏—Ñ") {
        // –ï—Å–ª–∏ —à–µ—Ä–∏—Ñ –ø–æ–ø–∞–ª –≤ –ø—Ä–µ–¥–∞—Ç–µ–ª—è
        if (victimRole === "–ü—Ä–µ–¥–∞—Ç–µ–ª—å") {
            CrewTeam.Remove(victim);
            GhostsTeam.Add(victim);
            gameMode.ghosts.add(victim.id);
            gameMode.deadPlayers.add(victim.id);
            victim.Properties.Get('Alive').Value = false;
            Chat.Send(`üéØ ${victim.NickName} –±—ã–ª —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω —à–µ—Ä–∏—Ñ–æ–º!`);
        } 
        // –ï—Å–ª–∏ —à–µ—Ä–∏—Ñ –æ—à–∏–±—Å—è
        else {
            CrewTeam.Remove(killer);
            GhostsTeam.Add(killer);
            gameMode.ghosts.add(killer.id);
            gameMode.deadPlayers.add(killer.id);
            killer.Properties.Get('Alive').Value = false;
            Chat.Send(`üí• ${killer.NickName} –æ—à–∏–±—Å—è –∏ –±—ã–ª –Ω–∞–∫–∞–∑–∞–Ω!`);
        }
    }
}

// –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π
function completeTask(player, taskId) {
    const task = gameMode.tasks.find(t => t.id === taskId);
    if (task) {
        gameMode.completedTasks++;
        Props.Get('Tasks_Completed').Value = gameMode.completedTasks;
        
        player.Properties.Scores.Value += 100;
        player.Ui.Hint.Value = `‚úÖ ${task.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã —ç–∫–∏–ø–∞–∂–∞
        if (gameMode.completedTasks >= gameMode.totalTasks) {
            endGame('crew');
        }
    }
}

// –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ–ª–∞
function reportBody(reporter, bodyId) {
    if (!gameMode.bodiesReported.has(bodyId)) {
        gameMode.bodiesReported.add(bodyId);
        startMeeting(reporter, `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–ª–æ ${Players.Get(bodyId).NickName}`);
    }
}

// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ
function emergencyMeeting(caller) {
    if (!gameMode.emergencyButtonUsed) {
        gameMode.emergencyButtonUsed = true;
        startMeeting(caller, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ!");
    }
}

// –ù–∞—á–∞–ª–æ —Å–æ–±—Ä–∞–Ω–∏—è
function startMeeting(caller, reason) {
    gameMode.meetingInProgress = true;
    gameMode.votes.clear();
    Chat.Send(`üö® ${reason} –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ!`);
    setGameState(GameStates.DISCUSSION);
}

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
function castVote(voterId, targetId) {
    if (gameMode.state !== GameStates.VOTING) return;
    if (gameMode.deadPlayers.has(voterId)) return;
    
    gameMode.votes.set(voterId, targetId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function processVotes() {
    const voteCount = new Map();
    
    // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
    gameMode.votes.forEach((targetId, voterId) => {
        if (!voteCount.has(targetId)) voteCount.set(targetId, 0);
        voteCount.set(targetId, voteCount.get(targetId) + 1);
    });
    
    // –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏
    let maxVotes = 0;
    let ejectedPlayer = null;
    
    voteCount.forEach((votes, playerId) => {
        if (votes > maxVotes) {
            maxVotes = votes;
            ejectedPlayer = playerId;
        }
    });
    
    // –ò–∑–≥–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    if (ejectedPlayer && maxVotes > 0) {
        const player = Players.Get(ejectedPlayer);
        CrewTeam.Remove(player);
        GhostsTeam.Add(player);
        gameMode.ghosts.add(player.id);
        gameMode.deadPlayers.add(player.id);
        player.Properties.Get('Alive').Value = false;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∏–∑–≥–Ω–∞–Ω–Ω–æ–≥–æ
        const role = gameMode.playerRoles.get(player.id);
        Chat.Send(`üó≥Ô∏è ${player.NickName} –∏–∑–≥–Ω–∞–Ω! –†–æ–ª—å: ${role}`);
        
        // –ï—Å–ª–∏ –∏–∑–≥–Ω–∞–Ω –ø—Ä–µ–¥–∞—Ç–µ–ª—å
        if (role === "–ü—Ä–µ–¥–∞—Ç–µ–ª—å") {
            gameMode.impostors.delete(player.id);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
            if (gameMode.impostors.size === 0) {
                endGame('crew');
            }
        }
    }
    
    gameMode.meetingInProgress = false;
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function endGame(winner) {
    let message = "";
    
    if (winner === 'crew') {
        message = "–≠–∫–∏–ø–∞–∂ –ø–æ–±–µ–∂–¥–∞–µ—Ç! –ó–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!";
        CrewTeam.Players.forEach(player => {
            player.Properties.Scores.Value += 1000;
        });
    } 
    else if (winner === 'impostors') {
        message = "–ü—Ä–µ–¥–∞—Ç–µ–ª–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç!";
        Players.All.forEach(player => {
            if (gameMode.impostors.has(player.id)) {
                player.Properties.Scores.Value += 1500;
            }
        });
    }
    
    Ui.GetContext().Hint.Value = message;
    Chat.Send(`üèÜ ${message}`);
    setGameState(GameStates.END);
}

// –°–∏—Å—Ç–µ–º–∞ —Å–∞–±–æ—Ç–∞–∂–∞
function sabotageSystem(saboteur, systemType) {
    if (!gameMode.impostors.has(saboteur.id)) return;
    
    gameMode.sabotageActive = true;
    let message = "";
    
    switch(systemType) {
        case 'lights':
            message = "–°–ê–ë–û–¢–ê–ñ: –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Å–≤–µ—â–µ–Ω–∏–µ!";
            break;
        case 'oxygen':
            message = "–°–ê–ë–û–¢–ê–ñ: –£—Ç–µ—á–∫–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞!";
            break;
        case 'reactor':
            message = "–°–ê–ë–û–¢–ê–ñ: –ü–µ—Ä–µ–≥—Ä–µ–≤ —Ä–µ–∞–∫—Ç–æ—Ä–∞!";
            break;
    }
    
    Chat.Send(`üî• ${message}`);
    mainTimer.Restart(60); // –í—Ä–µ–º—è –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
    
    // –ï—Å–ª–∏ —Å–∞–±–æ—Ç–∞–∂ –Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω –≤–æ–≤—Ä–µ–º—è
    mainTimer.OnTimer.Add(() => {
        if (gameMode.sabotageActive) {
            endGame('impostors');
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
function initPlayer(player) {
    player.Properties.Get('Role').Value = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞';
    player.Properties.Get('Alive').Value = true;
    player.Properties.Get('TasksDone').Value = 0;
    player.Properties.Get('Kills').Value = 0;
    
    player.inventory.Main.Value = false;
    player.inventory.Secondary.Value = false;
    player.inventory.Melee.Value = true;
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if (gameMode.state === GameStates.WAITING) {
        CrewTeam.Add(player);
    }
}

// –ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞
function initChatCommands() {
    Chat.OnMessage.Add(function(m) {
        const msg = m.Text.trim();
        const sender = Players.GetByRoomId(m.Sender);
        if (!sender) return;

        // –ú–µ—Ä—Ç–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ä—Ç–≤—ã–π —á–∞—Ç
        if (gameMode.deadPlayers.has(sender.id) && !msg.startsWith('/dead')) {
            return;
        }

        const args = msg.split(' ');
        const command = args[0].toLowerCase();

        if (command === '/help') {
            sender.Ui.Hint.Value = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/report [id] - —Å–æ–æ–±—â–∏—Ç—å –æ —Ç–µ–ª–µ
/meeting - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ
/sabotage [system] - —Å–∞–±–æ—Ç–∞–∂ (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/vote [id] - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ
/taskinfo - –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è
/complete - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
/dead [msg] - —á–∞—Ç –¥–ª—è –º–µ—Ä—Ç–≤—ã—Ö`;
        }
        
        else if (command === '/report') {
            if (args.length < 2) return;
            const bodyId = Number(args[1]);
            if (gameMode.bodiesReported.has(bodyId)) {
                reportBody(sender, bodyId);
            }
        }
        
        else if (command === '/meeting') {
            emergencyMeeting(sender);
        }
        
        else if (command === '/sabotage') {
            if (args.length < 2) return;
            sabotageSystem(sender, args[1]);
        }
        
        else if (command === '/vote') {
            if (args.length < 2) return;
            const targetId = Number(args[1]);
            castVote(sender.id, targetId);
        }
        
        else if (command === '/taskinfo') {
            const tasks = gameMode.tasks.filter(t => !t.completed);
            let taskList = "–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n";
            tasks.forEach(task => {
                taskList += `- ${task.name} (${task.location})\n`;
            });
            sender.Ui.Hint.Value = taskList;
        }
        
        else if (command === '/complete') {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if (checkInTaskZone(sender)) {
                const task = gameMode.tasks.find(t => !t.completed);
                if (task) {
                    completeTask(sender, task.id);
                }
            }
        }
        
        else if (command === '/dead') {
            const deadMessage = msg.substring(6);
            Players.All.forEach(p => {
                if (gameMode.deadPlayers.has(p.id)) {
                    p.Ui.Hint.Value = `üëª ${sender.NickName}: ${deadMessage}`;
                }
            });
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
function setupLeaderboard() {
    LeaderBoard.PlayerLeaderBoardValues = [
        new DisplayValueHeader('Role', '–†–æ–ª—å', '–†–æ–ª—å'),
        new DisplayValueHeader('Alive', '–°—Ç–∞—Ç—É—Å', '–ñ–∏–≤/–ú–µ—Ä—Ç–≤'),
        new DisplayValueHeader('TasksDone', '–ó–∞–¥–∞–Ω–∏—è', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'),
        new DisplayValueHeader('Kills', '–£–±–∏–π—Å—Ç–≤–∞', '–£–±–∏–π—Å—Ç–≤–∞')
    ];

    LeaderBoard.PlayersWeightGetter.Set(function(p) {
        return p.Properties.Get('TasksDone').Value + p.Properties.Get('Kills').Value * 2;
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
    Players.OnPlayerConnected.Add(function(player) {
        initPlayer(player);
        
        if (Players.All.length >= PLAYERS_TO_START && gameMode.state === GameStates.WAITING) {
            setGameState(GameStates.STARTING);
        }
    });
    
    
    Damage.OnDeath.Add(function(player) {
        player.Properties.Get('Alive').Value = false;
    });
    
    mainTimer.OnTimer.Add(function() {
        switch(gameMode.state) {
            case GameStates.WAITING:
                if (Players.All.length >= PLAYERS_TO_START) {
                    setGameState(GameStates.STARTING);
                }
                break;
                
            case GameStates.STARTING:
                setGameState(GameStates.TASKS);
                break;
                
            case GameStates.DISCUSSION:
                setGameState(GameStates.VOTING);
                break;
                
            case GameStates.VOTING:
                processVotes();
                setGameState(GameStates.TASKS);
                break;
                
            case GameStates.END:
                Game.RestartGame();
                break;
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
function initGameMode() {
    Dmg.DamageOut.Value = true;
    Dmg.FriendlyFire.Value = FRIENDLY_FIRE;
    BreackGraph.OnlyPlayerBlocksDmg = true;
    
    initServerProperties();
    setupLeaderboard();
    initChatCommands();
    setupEventHandlers();
    setGameState(GameStates.WAITING);
}

initGameMode();
