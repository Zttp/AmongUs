import { DisplayValueHeader, Color, Vector3 } from 'pixel_combats/basic';
import { Game, Players, Inventory, LeaderBoard, Teams, Damage, Ui, Properties, GameMode, Spawns, Timers, Chat, Bots } from 'pixel_combats/room';

// ========== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ==========
const WAITING_TIME = 10;      // –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ (—Å–µ–∫)
const PLAY_TIME = 300;        // –í—Ä–µ–º—è –∏–≥—Ä—ã (—Å–µ–∫)
const END_TIME = 30;          // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å–µ–∫)

// –¶–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥
const PLAYERS_COLOR = new Color(0, 0.5, 1, 0);     // –°–∏–Ω–∏–π
const LOSERS_COLOR = new Color(0.3, 0.3, 0.3, 0);  // –°–µ—Ä—ã–π

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const GameStates = {
    WAITING: "WaitingPlayers",
    PLAY: "PlayMode",
    END: "EndOfMatch"
};

// –†–æ–ª–∏
const PlayerRoles = {
    CREWMATE: "–ú–∏—Ä–Ω—ã–π",
    IMPOSTOR: "–ü—Ä–µ–¥–∞—Ç–µ–ª—å",
    SHERIFF: "–®–µ—Ä–∏—Ñ"
};

// ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
const gameMode = {
    state: GameStates.WAITING,
    impostorId: null,
    sheriffId: null,
    deadPlayers: new Set(),
    playerRoles: new Map(),
    bots: new Map(),
    adminId: "D411BD94CAE31F89",
    gameTimer: null
};

// –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
const Inv = Inventory.GetContext();
const Sp = Spawns.GetContext();
const Dmg = Damage.GetContext();
const Props = Properties.GetContext();
const botsService = BotsService.GetContext();

// ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
function initServerProperties() {
    Props.Get('Game_State').Value = gameMode.state;
    Props.Get('Time_Left').Value = PLAY_TIME;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
function setupTeams() {
    Teams.Add('Players', '–ò–≥—Ä–æ–∫–∏', PLAYERS_COLOR);
    Teams.Add('Losers', '–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ', LOSERS_COLOR);

    const PlayersTeam = Teams.Get('Players');
    const LosersTeam = Teams.Get('Losers');

    PlayersTeam.Spawns.SpawnPointsGroups.Add(1);
    LosersTeam.Spawns.SpawnPointsGroups.Add(2);

    return { PlayersTeam, LosersTeam };
}

const { PlayersTeam, LosersTeam } = setupTeams();

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
function setGameState(newState) {
    gameMode.state = newState;
    Props.Get('Game_State').Value = newState;
    
    const mainTimer = Timers.GetContext().Get("Main");
    
    switch(newState) {
        case GameStates.WAITING:
            Ui.GetContext().Hint.Value = "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...";
            Sp.Enable = false;
            mainTimer.Restart(WAITING_TIME);
            break;
            
        case GameStates.PLAY:
            Ui.GetContext().Hint.Value = "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–π–¥–∏—Ç–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
            Sp.Enable = true;
            Sp.Spawn();
            assignRoles();
            startGameTimer();
            break;
            
        case GameStates.END:
            Ui.GetContext().Hint.Value = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!";
            Sp.Enable = false;
            mainTimer.Restart(END_TIME);
            break;
    }
}

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
function assignRoles() {
    const players = PlayersTeam.Players;
    if (players.length < 2) return;

    // –í—ã–±–æ—Ä –ø—Ä–µ–¥–∞—Ç–µ–ª—è
    const impostorIndex = Math.floor(Math.random() * players.length);
    gameMode.impostorId = players[impostorIndex].id;
    gameMode.playerRoles.set(gameMode.impostorId, PlayerRoles.IMPOSTOR);
    Players.Get(gameMode.impostorId).Ui.Hint.Value = "–¢–´ –ü–†–ï–î–ê–¢–ï–õ–¨! –£–±–∏–≤–∞–π –∏–≥—Ä–æ–∫–æ–≤! –ö–æ–º–∞–Ω–¥—ã: /bot, /aye, /nay";

    // –í—ã–±–æ—Ä —à–µ—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
    if (players.length >= 3) {
        let sheriffIndex;
        do {
            sheriffIndex = Math.floor(Math.random() * players.length);
        } while (sheriffIndex === impostorIndex);
        
        gameMode.sheriffId = players[sheriffIndex].id;
        gameMode.playerRoles.set(gameMode.sheriffId, PlayerRoles.SHERIFF);
        Players.Get(gameMode.sheriffId).Ui.Hint.Value = "–¢–´ –®–ï–†–ò–§! –¢—ã –º–æ–∂–µ—à—å —É–±–∏–≤–∞—Ç—å –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–±–∏–π—Å—Ç–≤
function handleKill(killer, victim) {
    if (!killer || !victim) return;
    
    const killerRole = gameMode.playerRoles.get(killer.id);
    const victimRole = gameMode.playerRoles.get(victim.id);
    
    // –®–µ—Ä–∏—Ñ —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ –Ω–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—è
    if (killerRole === PlayerRoles.SHERIFF && victimRole !== PlayerRoles.IMPOSTOR) {
        killPlayer(killer); // –®–µ—Ä–∏—Ñ —É–º–∏—Ä–∞–µ—Ç
        return;
    }
    
    // –ü—Ä–µ–¥–∞—Ç–µ–ª—å —É–±–∏–≤–∞–µ—Ç
    if (killerRole === PlayerRoles.IMPOSTOR) {
        killPlayer(victim);
        checkWinConditions();
    }
}

// –£–±–∏–π—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∞
function killPlayer(player) {
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    LosersTeam.Add(player);
    gameMode.deadPlayers.add(player.id);
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è
    player.inventory.Main.Value = false;
    player.inventory.Secondary.Value = false;
    
    // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–æ–Ω—É
    player.SetPositionAndRotation(new Vector3(0, -100, 0), player.Rotation);
    player.Ui.Hint.Value = "–í—ã –º–µ—Ä—Ç–≤—ã!";
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
function checkWinConditions() {
    const alivePlayers = PlayersTeam.Players.filter(p => 
        !gameMode.deadPlayers.has(p.id)
    );
    
    // –ï—Å–ª–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—å —É–±–∏—Ç
    if (!alivePlayers.find(p => p.id === gameMode.impostorId)) {
        endRound('crewmates');
        return;
    }
    
    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å –∏ 1 –º–∏—Ä–Ω—ã–π
    if (alivePlayers.length <= 2) {
        endRound('impostor');
        return;
    }
}

// –°–∏—Å—Ç–µ–º–∞ –±–æ—Ç–æ–≤
function createBot(player, skinId = 0, weaponId = 1) {
    const bot = botsService.CreateHuman({
        Position: player.Position,
        Rotation: player.Rotation,
        WeaponId: weaponId,
        SkinId: skinId
    });
    
    gameMode.bots.set(bot.Id, {
        ownerId: player.id,
        isPossessed: false
    });
    
    return bot;
}

function possessBot(player, botId) {
    const bot = botsService.Get(botId);
    if (!bot) return false;
    
    const botData = gameMode.bots.get(botId);
    if (botData.ownerId !== player.id) return false;
    
    botData.isPossessed = true;
    botData.lastPosition = player.Position.clone();
    
    // "–ü—Ä—è—á–µ–º" –∏–≥—Ä–æ–∫–∞
    player.SetPositionAndRotation(new Vector3(0, -200, 0), player.Rotation);
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncTimer = Timers.GetContext().Get(`bot_sync_${botId}`);
    syncTimer.OnTimer.Add(() => {
        if (!botData.isPossessed) {
            syncTimer.Stop();
            return;
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞
        bot.SetPositionAndDirection(
            botData.lastPosition,
            player.Controls.LookDirection.Value
        );
    });
    
    syncTimer.RestartLoop(0.1);
    return true;
}

function unpossessBot(player, botId) {
    const bot = botsService.Get(botId);
    if (!bot) return false;
    
    const botData = gameMode.bots.get(botId);
    if (!botData.isPossessed || botData.ownerId !== player.id) return false;
    
    botData.isPossessed = false;
    player.SetPositionAndRotation(botData.lastPosition, player.Rotation);
    Timers.GetContext().Get(`bot_sync_${botId}`).Stop();
    return true;
}

// ========== –ö–û–ú–ê–ù–î–´ –ß–ê–¢–ê ==========
function initChatCommands() {
    Chat.OnMessage.Add(function(m) {
        const msg = m.Text.trim();
        const sender = Players.GetByRoomId(m.Sender);
        if (!sender) return;

        const args = msg.split(' ');
        const command = args[0].toLowerCase();

        if (command === '/help') {
            sender.Ui.Hint.Value = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/bot [skin] [weapon] - —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/aye [botId] - –≤—Å–µ–ª–∏—Ç—å—Å—è –≤ –±–æ—Ç–∞ (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/nay [botId] - –≤—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞ (–ø—Ä–µ–¥–∞—Ç–µ–ª—å)
/vote [id] - –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏–∑–≥–Ω–∞–Ω–∏–µ`;
        }
        
        else if (command === '/bot') {
            if (gameMode.playerRoles.get(sender.id) !== PlayerRoles.IMPOSTOR) {
                sender.Ui.Hint.Value = "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
                return;
            }
            
            const skinId = args[1] ? parseInt(args[1]) : 0;
            const weaponId = args[2] ? parseInt(args[2]) : 1;
            
            const bot = createBot(sender, skinId, weaponId);
            sender.Ui.Hint.Value = `ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω! ID: ${bot.Id}`;
        }
        
        else if (command === '/aye') {
            if (gameMode.playerRoles.get(sender.id) !== PlayerRoles.IMPOSTOR) {
                sender.Ui.Hint.Value = "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
                return;
            }
            
            const botId = args[1] ? parseInt(args[1]) : [...gameMode.bots.keys()][0];
            if (possessBot(sender, botId)) {
                sender.Ui.Hint.Value = "üëª –í—ã –≤—Å–µ–ª–∏–ª–∏—Å—å –≤ –±–æ—Ç–∞!";
            } else {
                sender.Ui.Hint.Value = "‚ùå –û—à–∏–±–∫–∞ –≤—Å–µ–ª–µ–Ω–∏—è!";
            }
        }
        
        else if (command === '/nay') {
            if (gameMode.playerRoles.get(sender.id) !== PlayerRoles.IMPOSTOR) {
                sender.Ui.Hint.Value = "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
                return;
            }
            
            const botId = args[1] ? parseInt(args[1]) : [...gameMode.bots.keys()][0];
            if (unpossessBot(sender, botId)) {
                sender.Ui.Hint.Value = "üë§ –í—ã –≤—ã—à–ª–∏ –∏–∑ –±–æ—Ç–∞!";
            } else {
                sender.Ui.Hint.Value = "‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞!";
            }
        }
        
        else if (command === '/vote') {
            if (args.length < 2) return;
            
            const targetId = Number(args[1]);
            const target = Players.Get(targetId);
            if (!target) return;
            
            // –ü—Ä–æ—Å—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ - —Å—Ä–∞–∑—É —É–±–∏–≤–∞–µ–º
            killPlayer(target);
            sender.Ui.Hint.Value = `‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ ${target.NickName}`;
            checkWinConditions();
        }
    });
}

// ========== –õ–ò–î–ï–†–ë–û–†–î ==========
function setupLeaderboard() {
    LeaderBoard.PlayerLeaderBoardValues = [
        new DisplayValueHeader('IdInRoom', 'ID', 'ID'),
        new DisplayValueHeader('Role', '–†–æ–ª—å', '–†–æ–ª—å'),
        new DisplayValueHeader('Status', '–°—Ç–∞—Ç—É—Å', '–°—Ç–∞—Ç—É—Å')
    ];

    LeaderBoard.PlayersWeightGetter.Set(function(p) {
        return p.id; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
    });
}

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –ò–ì–†–û–ö–ê ==========
function initPlayer(player) {
    // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –æ—Ä—É–∂–∏–µ
    player.inventory.Main.Value = true;
    player.inventory.Melee.Value = true;
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    PlayersTeam.Add(player);
    
    if (gameMode.state === GameStates.PLAY) {
        player.Ui.Hint.Value = "–ù–∞–π–¥–∏—Ç–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—è!";
    }
}

// –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
function startGameTimer() {
    gameMode.gameTimer = Timers.GetContext().Get("GameTimer");
    let timeLeft = PLAY_TIME;
    
    gameMode.gameTimer.OnTimer.Add(() => {
        timeLeft--;
        Props.Get('Time_Left').Value = timeLeft;
        
        if (timeLeft <= 0) {
            endRound('impostor');
            return;
        }
        
        gameMode.gameTimer.RestartLoop(1);
    });
    
    gameMode.gameTimer.RestartLoop(1);
}

// ========== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–£–ù–î–ê ==========
function endRound(winner) {
    if (winner === 'impostor') {
        Ui.GetContext().Hint.Value = "–ü—Ä–µ–¥–∞—Ç–µ–ª—å –ø–æ–±–µ–∂–¥–∞–µ—Ç!";
    } else {
        Ui.GetContext().Hint.Value = "–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç!";
    }
    
    setGameState(GameStates.END);
}

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ ==========
function initGameMode() {
    Dmg.DamageOut.Value = true;
    Dmg.FriendlyFire.Value = false;
    
    // –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å –∏ —à–µ—Ä–∏—Ñ –º–æ–≥—É—Ç —É–±–∏–≤–∞—Ç—å
    Dmg.OnBeforeDamage.Add(function(damage) {
        const attacker = Players.Get(damage.AttackerPlayerId);
        if (!attacker) return;
        
        const role = gameMode.playerRoles.get(attacker.id);
        if (role !== PlayerRoles.IMPOSTOR && role !== PlayerRoles.SHERIFF) {
            damage.Cancel = true;
        }
    });
    
    initServerProperties();
    setupTeams();
    setupLeaderboard();
    initChatCommands();
    setupEventHandlers();
    setGameState(GameStates.WAITING);
}

// ========== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
function setupEventHandlers() {
    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    Players.OnPlayerConnected.Add(function(player) {
        initPlayer(player);
        player.Ui.Hint.Value = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"! –ù–∞–ø–∏—à–∏—Ç–µ /help';
        
        if (Players.All.length >= 2 && gameMode.state === GameStates.WAITING) {
            setGameState(GameStates.PLAY);
        }
    });
    
    // –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã
    Teams.OnPlayerChangeTeam.Add(function(player) {
        initPlayer(player);
    });
    
    // –ü—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ
    Damage.OnKill.Add(handleKill);
    
    // –ü—Ä–∏ —Å–º–µ—Ä—Ç–∏
    Damage.OnDeath.Add(function(player) {
        player.Properties.Deaths.Value++;
    });
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä
    Timers.GetContext().Get("Main").OnTimer.Add(function() {
        switch(gameMode.state) {
            case GameStates.WAITING:
                if (Players.All.length >= 2) {
                    setGameState(GameStates.PLAY);
                }
                break;
                
            case GameStates.END:
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
                gameMode.impostorId = null;
                gameMode.sheriffId = null;
                gameMode.deadPlayers.clear();
                gameMode.playerRoles.clear();
                gameMode.bots.clear();
                
                // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                Players.All.forEach(p => PlayersTeam.Add(p));
                setGameState(GameStates.WAITING);
                break;
        }
    });
}

// –ó–ê–ü–£–°–ö –ò–ì–†–´
initGameMode();
